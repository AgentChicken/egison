(define $f (lambda [$x] x))

(define $multSd
  (lambda [$x $f $G]
    (let {[$F (Sd x f)]}
      (- (* F G)
         (Sd x (* f (d/d G x)))))))

(multSd x (cos x) (f x));(+ (* (sin x) x) (* -1 (sin x)))
(multSd x (cos (* 2 x)) (f x));(/ (+ (* 2 (sin (* 2 x)) x) (* -2 (sin (* 2 x)))) 4)
(multSd x (cos (* n x)) (f x));(/ (+ (* (sin (* n x)) x n) (* -1 (sin (* n x)) n)) n^2)

(multSd x (sin x) (f x));(+ (* -1 (cos x) x) (cos x))
(multSd x (sin (* 2 x)) (f x));(/ (+ (* -1 (cos (* 2 x)) x) (cos (* 2 x))) 2)
(multSd x (sin (* n x)) (f x));(/ (+ (* -1 (cos (* n x)) x) (cos (* n x))) n)


(define $as (map (lambda [$n] (let {[$F (multSd x (cos (* n x)) (f x))]}
                                (- (substitute {[x π]} F) (substitute {[x (* -1 π)]} F))))
                 nats))
(take 10 as)
;{0 0 0 0 0 0 0 0 0 0}

(define $bs (map (lambda [$n] (let {[$F (multSd x (sin (* n x)) (f x))]}
                                (- (substitute {[x π]} F) (substitute {[x (* -1 π)]} F))))
                 (take 10 nats)))
(take 10 bs)
;{(* -2 π) π (/ (* -2 π) 3) (/ π 2) (/ (* -2 π) 5) (/ π 3) (/ (* -2 π) 7) (/ π 4) (/ (* -2 π) 9) (/ π 5)}

(take 10 (map (* $ (/ 1 (* 2 π))) bs))
;{-1 (/ 1 2) (/ -1 3) (/ 1 4) (/ -1 5) (/ 1 6) (/ -1 7) (/ 1 8) (/ -1 9) (/ 1 10)}

;(/ 4 π) = (+ -1 (/ 1 2) (/ -1 3) (/ 1 4) (/ -1 5) (/ 1 6) (/ -1 7) (/ 1 8) (/ -1 9) (/ 1 10) ...)