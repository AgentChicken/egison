;;;
;;; Parameters
;;;

(define $x [|θ φ ψ η ζ|])

(define $X [|(* r (cos θ))
             (* r (sin θ) (cos φ))
             (* r (sin θ) (sin φ) (cos ψ))
             (* r (sin θ) (sin φ) (sin ψ) (cos η))
             (* r (sin θ) (sin φ) (sin ψ) (sin η) (cos ζ))
             (* r (sin θ) (sin φ) (sin ψ) (sin η) (sin ζ))
             |])

;;
;; Local basis
;;

(define $e ((flip ∂/∂) x~# X_#))
e
;[|[| (* -1 r (sin θ)) (* r (cos θ) (cos φ)) (* r (cos θ) (sin φ) (cos ψ)) (* r (cos θ) (sin φ) (sin ψ) (cos η)) (* r (cos θ) (sin φ) (sin ψ) (sin η) (cos ζ)) (* r (cos θ) (sin φ) (sin ψ) (sin η) (sin ζ)) |]
;  [| 0 (* -1 r (sin θ) (sin φ)) (* r (sin θ) (cos φ) (cos ψ)) (* r (sin θ) (cos φ) (sin ψ) (cos η)) (* r (sin θ) (cos φ) (sin ψ) (sin η) (cos ζ)) (* r (sin θ) (cos φ) (sin ψ) (sin η) (sin ζ)) |]
;  [| 0 0 (* -1 r (sin θ) (sin φ) (sin ψ)) (* r (sin θ) (sin φ) (cos ψ) (cos η)) (* r (sin θ) (sin φ) (cos ψ) (sin η) (cos ζ)) (* r (sin θ) (sin φ) (cos ψ) (sin η) (sin ζ)) |]
;  [| 0 0 0 (* -1 r (sin θ) (sin φ) (sin ψ) (sin η)) (* r (sin θ) (sin φ) (sin ψ) (cos η) (cos ζ)) (* r (sin θ) (sin φ) (sin ψ) (cos η) (sin ζ)) |]
;  [| 0 0 0 0 (* -1 r (sin θ) (sin φ) (sin ψ) (sin η) (sin ζ)) (* r (sin θ) (sin φ) (sin ψ) (sin η) (cos ζ)) |] |]

;;
;; Metric tensor
;;

(define $g__ (generate-tensor 2#(* (a θ φ ψ η ζ) (V.* e_%1 e_%2)) {5 5}))
(define $g~~ (M.inverse g_#_#))
g_#_#
;[|[| (* (a θ φ ψ η ζ) r^2) 0 0 0 0 |]
;  [| 0 (* (a θ φ ψ η ζ) r^2 (sin θ)^2) 0 0 0 |]
;  [| 0 0 (* (a θ φ ψ η ζ) r^2 (sin θ)^2 (sin φ)^2) 0 0 |]
;  [| 0 0 0 (* (a θ φ ψ η ζ) r^2 (sin θ)^2 (sin φ)^2 (sin ψ)^2) 0 |]
;  [| 0 0 0 0 (* (a θ φ ψ η ζ) r^2 (sin θ)^2 (sin φ)^2 (sin ψ)^2 (sin η)^2) |]|]_#_#
g~#~#

(with-symbols {i j k} (. g~i~j g_j_k))
;[| [| 1 0 0 0 0 |] [| 0 1 0 0 0 |] [| 0 0 1 0 0 |] [| 0 0 0 1 0 |] [| 0 0 0 0 1 |] |]

;;
;; Christoffel symbols of the first kind
;;

(define $Γ_j_k_l
  (* (/ 1 2)
     (+ (∂/∂ g_j_k x_l)
        (∂/∂ g_j_l x_k)
        (* -1 (∂/∂ g_k_l x_j)))))
Γ_#_#_#

;;
;; Christoffel symbols of the second kind
;;

(define $Γ~i_k_l
  (with-symbols {j}
    (. g~i~j Γ_j_k_l)))
Γ~#_#_#

;;
;; Riemann curvature tensor
;;

(define $R~i_j_l_k
  (+ (- (∂/∂ Γ~i_j_k x_l) (∂/∂ Γ~i_j_l x_k))
     (- (. Γ~m_j_k Γ~i_m_l) (. Γ~m_j_l Γ~i_m_k))))

R~#_#_#_#

(define $R_i_j_l_k (with-symbols {m} (. g_i_m R~m_j_k_l)))

;;
;; Ricci curvature
;;

(define $Ric__ (with-symbols {i j k} (contract + R~i_j_k_i)))

Ric_#_#

;;
;; Scalar curvature
;;

(define $scalar-curvature (with-symbols {j k} (. g~j~k Ric_j_k)))

scalar-curvature
;(/ (+
;      (* -4 (a|1|1 θ φ ψ η ζ) (sin θ)^2 (a θ φ ψ η ζ) (sin φ)^2 (sin ψ)^2 (sin η)^2)
;      (* -4 (a|2|2 θ φ ψ η ζ) (a θ φ ψ η ζ) (sin φ)^2 (sin ψ)^2 (sin η)^2)
;      (* -4 (a|3|3 θ φ ψ η ζ) (a θ φ ψ η ζ) (sin ψ)^2 (sin η)^2)
;      (* -4 (a|4|4 θ φ ψ η ζ) (a θ φ ψ η ζ) (sin η)^2)
;      (* -4 (a|5|5 θ φ ψ η ζ) (a θ φ ψ η ζ))
;      (* (a|1 θ φ ψ η ζ)^2 (sin θ)^2 (sin φ)^2 (sin ψ)^2 (sin η)^2)
;      (* (a|2 θ φ ψ η ζ)^2 (sin φ)^2 (sin ψ)^2 (sin η)^2)
;      (* (a|3 θ φ ψ η ζ)^2 (sin ψ)^2 (sin η)^2)
;      (* (a|4 θ φ ψ η ζ)^2 (sin η)^2)
;      (* -16 (a|1 θ φ ψ η ζ) (a θ φ ψ η ζ) (cos θ) (sin θ) (sin φ)^2 (sin ψ)^2 (sin η)^2)
;      (* -12 (a|2 θ φ ψ η ζ) (a θ φ ψ η ζ) (cos φ) (sin φ) (sin ψ)^2 (sin η)^2)
;      (* -8 (a|3 θ φ ψ η ζ) (a θ φ ψ η ζ) (cos ψ) (sin ψ) (sin η)^2)
;      (* -4 (a|4 θ φ ψ η ζ) (a θ φ ψ η ζ) (cos η) (sin η))
;      (a|5 θ φ ψ η ζ)^2
;      (* 20 (sin θ)^2 (a θ φ ψ η ζ)^2 (sin φ)^2 (sin ψ)^2 (sin η)^2)
;      )
;   (* (a θ φ ψ η ζ)^3 r^2 (sin θ)^2 (sin φ)^2 (sin ψ)^2 (sin η)^2))

;;
;; Weyl curvature tensor
;;
(define $C_i_k_l_m
  (+ (. R_i_k_l_m)
     (+ (- (. Ric_i_m g_k_l) (. Ric_i_l g_k_m))
        (- (. Ric_k_l g_i_m) (. Ric_k_m g_i_l)))
     (* (/ scalar-curvature 2) (- (. g_i_l g_k_m) (. g_i_m g_k_l)))))

C_#_#_#_#

(define $C~j_k_l_m (with-symbols {i} (. g~i~j C_i_k_l_m)))
C~#_#_#_#

;;
;; Wodzicki-Chern-Simons form
;;

(let* {[[$es $os] (even-and-odd-permutations 5)]
       [$es' (map 1#(lambda [$i] (nth i %1)) es)]
       [$os' (map 1#(lambda [$i] (nth i %1)) os)]}
  (- (sum' (map (lambda [$σ] (.' C~u_1_s_(σ 1) C~s_t_(σ 3)_(σ 2) C~t_u_(σ 5)_(σ 4))) es'))
     (sum' (map (lambda [$σ] (.' C~u_1_s_(σ 1) C~s_t_(σ 3)_(σ 2) C~t_u_(σ 5)_(σ 4))) os'))))
;0
