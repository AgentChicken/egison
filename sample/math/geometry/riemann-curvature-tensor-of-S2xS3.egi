;;
;; Parameter
;;

(define $x [| θ y φ ψ α |])

;;
;; Riemann metric of S2 x S3
;;

(define $ds2
  (+ (* (/ '(- 1 y) 6) (+ dθ^2 (* (sin θ)^2 dφ^2)))
     (* (/ 1 (* (w y) (q y))) dy^2)
     (* (/ (q y) 9) (- dψ^2 (* (cos θ) dφ^2)))
     (* (w y) (** (+ dα (* (/ '(+ a (* -2 y) y^2)
                              (* 6 '(- a y^2)))
                           (- dψ (* (cos θ) dφ))))
                  2))))

(define $w (lambda [$y] (/ (* 2 '(- a y^2)) '(- 1 y))))
(define $q (lambda [$y]  (/ '(+ a (* -3 y^2) (* 2 y^3)) '(- a y^2))))

;;
;; Metric tensor
;;

(define $g__ (generate-matrix-from-expr ds2 {dθ dy dφ dψ dα}))
g_#_#
;[|[| (/ '(+ 1 (* -1 y)) 6) 0 0 0 0 |]
;  [| 0 (/ '(+ 1 (* -1 y)) (* 2 '(+ a (* -3 y^2) (* 2 y^3)))) 0 0 0 |]
;  [| 0 0 (/ (+ (* 3 '(+ 1 (* -1 y))^2 (sin θ)^2 '(+ a (* -1 y^2))) (* -2 '(+ a (* -3 y^2) (* 2 y^3)) (cos θ) '(+ 1 (* -1 y))) (* '(+ a (* -2 y) y^2)^2 (cos θ)^2)) (* 18 '(+ a (* -;1 y^2)) '(+ 1 (* -1 y)))) (/ (* -1 '(+ a (* -2 y) y^2)^2 (cos θ)) (* 9 '(+ a (* -1 y^2)) '(+ 1 (* -1 y)))) (/ (* -2 '(+ a (* -2 y) y^2) (cos θ)) (* 3 '(+ 1 (* -1 y)))) |]
;  [| 0 0 (/ (* -1 '(+ a (* -2 y) y^2)^2 (cos θ)) (* 9 '(+ a (* -1 y^2)) '(+ 1 (* -1 y)))) (/ (+ (* 2 '(+ a (* -3 y^2) (* 2 y^3)) '(+ 1 (* -1 y))) '(+ a (* -2 y) y^2)^2) (* 18 '(+ a (* -1 y^2)) '(+ 1 (* -1 y)))) (/ (* 2 '(+ a (* -2 y) y^2)) (* 3 '(+ 1 (* -1 y)))) |]
;  [| 0 0 (/ (* -2 '(+ a (* -2 y) y^2) (cos θ)) (* 3 '(+ 1 (* -1 y)))) (/ (* 2 '(+ a (* -2 y) y^2)) (* 3 '(+ 1 (* -1 y)))) (/ (* 2 '(+ a (* -1 y^2))) '(+ 1 (* -1 y))) |]
   ;  |]

;(define $g~~ (M.inverse g_#_#))


;;
;; Christoffel symbols of the first kind
;;

(define $Γ___
  (with-symbols {j k l}
    (* (/ 1 2)
       (+ (∂/∂ g_j_l x_k)
          (∂/∂ g_j_k x_l)
          (* -1 (∂/∂ g_k_l x_j))))))

Γ_#_#_#
Γ_1_#_#
Γ_2_#_#

"here"

;;
;; Christoffel symbols of the second kind
;;

(define $Γ~__
  (with-symbols {i j k l}
    (. g~i~j Γ_j_k_l)))

Γ~#_#_#
Γ~1_#_#
Γ~2_#_#

;;
;; Riemann curvature tensor
;;

(define $R~___
  (with-symbols {i j k l m}
    (+ (- (∂/∂ Γ~i_j_k x_l) (∂/∂ Γ~i_j_l x_k))
       (- (. Γ~m_j_k Γ~i_m_l) (. Γ~m_j_l Γ~i_m_k)))))

R~#_#_#_#
R~#_#_1_1
R~#_#_1_2
R~#_#_2_1
R~#_#_2_2

;;
;; Ricci curvature
;;

(define $Ric__ (with-symbols {i j k} (contract + R~i_j_k_i)))

Ric_#_#

;;
;; Scalar curvature
;;

(define $scalar-curvature (with-symbols {j k} (. g~j~k Ric_j_k)))

scalar-curvature
