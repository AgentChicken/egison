(define $proc2
  (lambda [$n $x]
    [(quotient n (fact x))
     (remainder n (fact x))]))
        

(define $proc1
  (lambda [$n]
    (let {[[$x9 $n] (proc2 n 9)]}
      (let {[[$x8 $n] (proc2 n 8)]}
        (let {[[$x7 $n] (proc2 n 7)]}
          (let {[[$x6 $n] (proc2 n 6)]}
            (let {[[$x5 $n] (proc2 n 5)]}
              (let {[[$x4 $n] (proc2 n 4)]}
                (let {[[$x3 $n] (proc2 n 3)]}
                  (let {[[$x2 $n] (proc2 n 2)]}
                    (let {[[$x1 $x0] (proc2 n 1)]}
                      {x9 x8 x7 x6 x5 x4 x3 x2 x1 x0})))))))))))

(define $proc
  (lambda [$xs $ns]
    (match [xs ns] [(list integer) (multiset integer)]
      {[[<nil> <nil>] {}]
       [[<cons $x $rxs> <cons ,(nth (+ x 1) ns) $rns>] {(nth (+ x 1) ns) @(proc rxs rns)}]})))

(proc (proc1 (- 1000000 1)) (between 0 9))
