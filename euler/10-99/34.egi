(load "lib/math/project-euler.egi")

(define $fact'
  (memoized-lambda [$n]
    (fact n)))

(zip (between 1 9) (map fact' (between 1 9)))
;{[1 1] [2 2] [3 6] [4 24] [5 120] [6 720] [7 5040] [8 40320] [9 362880]}

(define $f'
  (lambda [$xs]
    (qsort (num-to-digits (sum (map fact' xs))))))

(define $f
  (lambda [$xs]
    (eq? (qsort xs) (f' xs))))

(define $c2
  (match-all (reverse (between 0 4)) (list integer)
    [<join _ (& <cons (& ?(gte? $ 3) $x_1) _> (loop $i [2 3] <join _ (& <cons $x_i _> ...)> _))>
     (map (ref x $) (between 1 2))]))

(define $c3
  (match-all (reverse (between 0 6)) (list integer)
    [<join _ (& <cons (& ?(gte? $ 5) $x_1) _> (loop $i [2 3] <join _ (& <cons $x_i _> ...)> _))>
     (map (ref x $) (between 1 3))]))

(define $c4
  (match-all (reverse (between 0 7)) (list integer)
    [<join _ (& <cons (& ?(gte? $ 6) $x_1) _> (loop $i [2 4] <join _ (& <cons $x_i _> ...)> _))>
     (map (ref x $) (between 1 4))]))

(define $c5
  (match-all (reverse (between 0 8)) (list integer)
    [<join _ (& <cons (& ?(gte? $ 7) $x_1) _> (loop $i [2 5] <join _ (& <cons $x_i _> ...)> _))>
     (map (ref x $) (between 1 5))]))

(define $c6
  (match-all (reverse (between 0 9)) (list integer)
    [<join _ (& <cons (& ?(gte? $ 8) $x_1) _> (loop $i [2 6] <join _ (& <cons $x_i _> ...)> _))>
     (map (ref x $) (between 1 6))]))

(define $c7
  (match-all (reverse (between 0 9)) (list integer)
    [<join _ (& <cons (& ?(gte? $ 9) $x_1) _> (loop $i [2 7] <join _ (& <cons $x_i _> ...)> _))>
     (map (ref x $) (between 1 7))]))

(io (each (compose show print) (filter f c2)))
(io (each (compose show print) (filter f c3)))
(io (each (compose show print) (filter f c4)))
(io (each (compose show print) (filter f c5)))
(io (each (compose show print) (filter f c6)))
(io (each (compose show print) (filter f c7)))
