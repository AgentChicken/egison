;;;;;
;;;;;
;;;;; Term Rewriting
;;;;;
;;;;;

(define $term-rewriting-rules {[(power i 2) -1] [(power w 2) (+ (* -1 w) -1)]})

(define $rewrite-math-expr-with-a-rule
  (lambda [$mexpr $sym $mexpr2]
    (match mexpr math-expr
      {[<div $pexpr1 $pexpr2>
        (/ (rewrite-poly-expr-with-a-rule pexpr1 sym mexpr2)
           (rewrite-poly-expr-with-a-rule pexpr2 sym mexpr2))]})))

(define $rewrite-poly-expr-with-a-rule
  (lambda [$pexpr $sym $mexpr]
    (match pexpr poly-expr
      {[<plus $ts>
        (let {[$ret (map (rewrite-term-with-a-rule $ sym mexpr) ts)]}
          (foldl + 0 (map 2#%2 ret)))]})))

(define $rewrite-term-with-a-rule
  (lambda [$term $sym $mexpr]
    (match [sym term] [symbol-expr term-expr]
      {[[<symbol $v $n> <term $a <cons <symbol ,v $k> $xs>>]
        [#f
         (* (to-math-expr <Div <Plus {<Term a {<Symbol v (modulo k n)> @xs}>}> <Plus {<Term 1 {}>}>>)
            (power mexpr (quotient k n)))]]
       [[_ _]
        [#t
         (to-math-expr <Div <Plus {term}> <Plus {<Term 1 {}>}>>)]]})))
