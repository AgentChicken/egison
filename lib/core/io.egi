;;;;;;
;;;;;;
;;;;;; IO
;;;;;;
;;;;;;

;;;
;;; IO
;;;
(define $print
  (lambda [$x]
    (do {[(write x)]
         [(write "\n")]
         [(flush)]
         })))

(define $print-to-port
  (lambda [$port $x]
    (do {[(write-to-port port x)]
         [(write-to-port port "\n")]
         })))

(define $each-line
  (lambda [$proc]
    (do {[$eof (eof?)]}
      (if eof
        (return [])
        (do {[$line (read-line)]
             [(proc line)]}
          (each-line proc))))))

(define $each-line-from-port
  (lambda [$port $proc]
    (do {[$eof (eof-port? port)]}
      (if eof
        (return [])
        (do {[$line (read-line-from-port port)]
             [(proc line)]}
          (each-line-from-port port proc))))))

(define $each-file
  (lambda [$files]
    (match files (list string)
      {[<nil> (return [])]
       [<cons $file $rest>
        (do {[$port (open-input-file file)]
             [(each-line-from-port port print)]
             [(close-input-port port)]}
          (each-file rest))]})))

(define $read-file
  (lambda [$file]
    (letrec {[$read-file-content (lambda [$port $ret]
                                   (do {[$eof (eof-port? port)]}
                                     (if eof
                                       (return ret)
                                       (do {[$line (read-line-from-port port)]
                                            [$ret2 (read-file-content port (S.concat {ret "\n" line}))]}
                                         (return ret2)))))]}
      (do {[$port (open-input-file file)]
           [$content (read-file-content port "")]}
        (return content)))))

;;;
;;; Collection
;;;
(define $each
  (lambda [$proc $xs]
    (match xs (list something)
      {[<nil> (do {})]
       [<cons $x $rs>
        (do {[(proc x)]}
          (each proc rs))]})))
