;;;;;
;;;;;
;;;;; Arithmetic Operation
;;;;;
;;;;;


(define $to-math-expr (macro [$arg] (math-normalize (apply to-math-expr' arg))))

(define $+ (macro [$arg] (math-normalize (apply +' arg))))
(define $- (macro [$arg] (math-normalize (apply -' arg))))
(define $* (macro [$arg] (math-normalize (apply *' arg))))
(define $/ (macro [$arg] (math-normalize (apply /' arg))))

(define $power
  (lambda [$x $n]
    (foldl * 1 (take n (repeat1 x)))))

(define $power'
  (lambda [$x $n]
    (foldl * 1 (take n (repeat1 x)))))

(define $**
  (lambda [$x $n]
    (if (rational? n)
      (if (gte? n 0)
        (if (integer? n)
          (power x n)
          (to-math-expr <Apply "**" (map from-math-expr {x n})>))
        (/ 1 (** x (neg n))))
      (to-math-expr <Apply "**" (map from-math-expr {x n})>))))

(define $**
  (lambda [$x $n]
    (if (rational? n)
      (if (gte? n 0)
        (if (integer? n)
          (power' x n)
          (to-math-expr' <Apply "**" (map from-math-expr {x n})>))
        (/' 1 (**' x (neg n))))
      (to-math-expr' <Apply "**" (map from-math-expr {x n})>))))

(define $sqrt
  (lambda [$n]
    (if (rational? n)
      (letrec {[$f (lambda [$xs]
                     (match xs (list integer)
                       {[<nil> [1 1]]
                        [<cons $p <cons ,p $rs>>
                         (let {[$ret (f rs)]}
                           [(*' p (2#%1 ret)) (2#%2 ret)])]
                        [<cons $p $rs>
                         (let {[$ret (f rs)]}
                           [(2#%1 ret) (* p (2#%2 ret))])]}))]}
        (letrec {[$g (lambda [$n]
                       (match (f (p-f n)) [integer integer]
                         {[[$n ,1] n]
                          [[$n $m] (*' n (sqrt' m))]}))]}
          (if (gt? n 0)
            (/' (g (numerator n)) (g (denominator n)))
            (*' (/' (g (numerator (abs n))) (g (denominator n))) i))))
      (sqrt' n))))
