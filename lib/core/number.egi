;;;;;
;;;;;
;;;;; Number Library
;;;;;
;;;;;

;;;
;;; Integers
;;;
(define $integer buildin-data-matcher)

(define $min
  (lambda [$ns]
    (foldl (lambda [$x $y] (if (lt? x y) x y)) (car ns) (cdr ns))))

(define $max
  (lambda [$ns]
    (foldl (lambda [$x $y] (if (gt? x y) x y)) (car ns) (cdr ns))))

(define $min-and-max
  (lambda [$ns]
    (match ns (list integer)
      {[<cons $n <nil>> [n n]]
       [<cons $n $rs>
        (let {[[$min-n $max-n] (min-and-max rs)]}
          (match (compare n min-n) ordering
            {[<less> [n max-n]]
             [_ (match (compare n max-n) ordering
                  {[<greater> [min-n n]]
                   [_ [min-n max-n]]})]}))]})))

(define $power
  (lambda [$x $n]
    (foldl * 1 (take n (repeat1 x)))))

(define $mod
  (lambda [$m]
    (matcher
      {[,$n []
        {[$tgt (if (eq? (modulo tgt m) (modulo n m))
                   {[]}
                   {})]}]
       [$ [something]
        {[$tgt {tgt}]}]
       })))

(define $even?
  (lambda [$n]
    (eq? 0 (modulo n 2))))

(define $odd?
  (lambda [$n]
    (eq? 1 (modulo n 2))))

(define $between?
  (lambda [$m $n $x]
    (and (lte? m x) (lte? x n))))

;;
;; Float Numbers
;;
(define $float buildin-data-matcher)
