;;;;;
;;;;;
;;;;; Term Rewriting
;;;;;
;;;;;

;(set-term-rewriting-rule {[(rt $n $x)^,n x]
;                          [(* (sqrt $x) (sqrt $y)) (* (gcd x y) (sqrt (/ (* x y) (gcd x y))))]
;                          [(rtu $n)^,n 1]
;                          [w^3 1]
;                          [w^2 (- -1 w)]
;                          [i^2 -1]})

(define $math-normalize
  (lambda [$mexpr]
    (if (number? mexpr)
      (if (rational? mexpr)
        mexpr
        (map-terms rewrite-rule-rt
                   (map-terms rewrite-rule-sqrt
                              (map-terms rewrite-rule-rtu
                                         (map-terms rewrite-rule-w
                                                    (map-terms rewrite-rule-i mexpr)))))
        )
      mexpr)))

(define $map-terms
  (lambda [$fn $mexpr]
    (match mexpr math-expr
      {[<div <plus $ts1> <plus $ts2>>
        (/' (foldl +' 0 (map fn ts1))
            (foldl +' 0 (map fn ts2)))]})))

(define $rewrite-rule-i
  (lambda [$term]
    (match term term-expr
      {[<term $a <ncons (& ?even? $k) <symbol ,"i"> $ts>>
        (*' a (**' -1 (quotient k 2)) (foldl *' 1 (map 2#(**' %1 %2) ts)))]
       [<term $a <ncons $k <symbol ,"i"> $ts>>
        (*' a (**' -1 (quotient k 2)) i (foldl *' 1 (map 2#(**' %1 %2) ts)))]
       [_ term]})))

(define $rewrite-rule-w
  (lambda [$term]
    (match term term-expr
      {[<term $a <ncons (& ?(gte? $ 3) $k) <symbol ,"w"> $ts>>
        (*' a (**' w (remainder k 3)) (foldl *' 1 (map 2#(**' %1 %2) ts)))]
       [<term $a <ncons ,2 <symbol ,"w"> $ts>>
        (*' a (- -1 w) (foldl *' 1 (map 2#(**' %1 %2) ts)))]
       [_ term]})))

(define $rewrite-rule-rtu
  (lambda [$term]
    (match term term-expr
      {[<term $a <ncons $k <apply ,"rtu" <cons (& ?(gte? k $) $n) <nil>>> $ts>>
        (*' a (**' (rtu n) (remainder k n)) (foldl *' 1 (map 2#(**' %1 %2) ts)))]
       [_ term]})))

(define $rewrite-rule-sqrt
  (lambda [$term]
    (match term term-expr
      {[<term $a <cons <apply ,"sqrt" <cons $x <nil>>> <cons <apply ,"sqrt" <cons $y <nil>>> $ts>>>
        (let {[$d (gcd {x y})]}
          (*' a d (sqrt (/ x d)) (sqrt (/ y d)) (foldl *' 1 (map 2#(**' %1 %2) ts))))]
       [_ term]})))

(define $rewrite-rule-rt
  (lambda [$term]
    (match term term-expr
      {[<term $a <ncons $k <apply ,"rt" <cons (& ?(gte? k $) $n) <cons $x <nil>>>> $ts>>
        (*' a (**' x (quotient k n)) (**' (rt n x) (remainder k n)) (foldl *' 1 (map 2#(**' %1 %2) ts)))]
       [_ term]})))
