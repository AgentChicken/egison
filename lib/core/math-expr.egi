;;;;;
;;;;;
;;;;; Mathematics Expressions
;;;;;
;;;;;

(define $math-expr
  (matcher
    {[$ [math-expr']
      {[<Div $p1 $p2> {<Div p1 p2>}]
       [$tgt {(from-math-expr tgt)}]}]
     }))

(define $math-expr'
  (matcher
    {[<div $ $> [poly-expr poly-expr]
      {[<Div $p1 $p2> {[p1 p2]}]
       [_ {}]}]
     [$ [something]
      {[$tgt {(to-math-expr' tgt)}]}]
     }))

(define $poly-expr
  (matcher
    {[$ [poly-expr']
      {[<Plus $ts> {<Plus ts>}]
       [<Div <Plus $ts> <Plus {<Term 1 {}> @{}}>> {<Plus ts>}]
       [$tgt {(from-math-expr tgt)}]}]
     }))

(define $poly-expr'
  (matcher
    {[<plus $> [(multiset term-expr)]
      {[<Plus $ts> {(map to-math-expr' ts)}]
       [<Div <Plus $ts> <Plus {<Term 1 {}> @{}}>> {(map to-math-expr' ts)}]
       [_ {}]}]
     [$ [something]
      {[$tgt {(to-math-expr' tgt)}]}]
     }))

(define $term-expr
  (matcher
    {[$ [term-expr']
      {[<Term $n $xs> {<Term n xs>}]
       [<Div <Plus {<Term $n $xs> @{}}> <Plus {<Term 1 {}> @{}}>> {<Term n xs>}]
       [$tgt {(from-math-expr tgt)}]}]
     }))

(define $term-expr'
  (matcher
    {[<term $ $> [integer (assoc-multiset symbol-expr)]
      {[<Term $n $xs> {[n (map 2#[(to-math-expr' %1) %2] xs)]}]
       [<Div <Plus {<Term $n $xs> @{}}> <Plus {<Term 1 {}> @{}}>> {[n (map 2#[(to-math-expr' %1) %2] xs)]}]
       [_ {}]}]
     [$ [something]
      {[$tgt {(to-math-expr' tgt)}]}]
     }))

(define $symbol-expr
  (matcher
    {[$ [symbol-expr']
      {[<Symbol $v> {<Symbol v>}]
       [<Div <Plus {<Term 1 {[<Symbol $v> 1] @{}}> @{}}> <Plus {<Term 1 {}> @{}}>> {<Symbol v>}]
       [<Apply $v $mexprs> {<Apply v mexprs>}]
       [<Div <Plus {<Term 1 {[<Apply $v $mexprs> 1] @{}}> @{}}> <Plus {<Term 1 {}> @{}}>> {<Apply v mexprs>}]
       [$tgt {(from-math-expr tgt)}]}]
     }))

(define $symbol-expr'
  (matcher
    {[<symbol $> [string]
      {[<Symbol $v> {v}]
       [<Div <Plus {<Term 1 {[<Symbol $v> 1] @{}}> @{}}> <Plus {<Term 1 {}> @{}}>> {v}]
       [_ {}]}]
     [<apply $ $> [string (list math-expr)]
      {[<Apply $v $mexprs> [v mexprs]]
       [<Div <Plus {<Term 1 {[<Apply $v $mexprs> 1] @{}}> @{}}> <Plus {<Term 1 {}> @{}}>> {[v (map to-math-expr' mexprs)]}]
       [_ {}]}]
     [$ [something]
      {[$tgt {(to-math-expr' tgt)}]}]
     }))

(define $symbol?
  (lambda [$mexpr]
    (match mexpr math-expr
      {[<div <plus <cons <term ,1 <cons <symbol _> <nil>>> <nil>>>
             <plus <cons <term ,1 <nil>> <nil>>>>
        #t]
       [_ #f]})))

(define $term?
  (lambda [$mexpr]
    (match mexpr math-expr
      {[<div <plus <cons <term _ _> <nil>>>
             <plus <cons <term _ _> <nil>>>>
        #t]
       [_ #f]})))
