;;;;;
;;;;; Inverse
;;;;;

(define $inverse
  (lambda [$t $x $f]
    (match f math-expr
      {[?simple-term?
        (match f symbol-expr
          {[,x t]
           [(exp ,x) (log t)]
           [(log ,x) (exp t)]
           [(sqrt ,x) (** t 2)]
           [(cos ,x) (acos t)]
           [(sin ,x) (asin t)]
           [(acos ,x) (cos t)]
           [(asin ,x) (sin t)]
           [_ (inverse' t x f)]
           })]
       [?term?
        (match f term-expr
          {[<term ,1 <ncons $n ,x <nil>>> (rt n t)]
           [<term ,1 <ncons $n $fx <nil>>>
            (inverse' t x fx)
            ]
           [<term $a $fxs> (inverse (/ t a) x (foldl *' 1 (map 2#(**' %1 %2) fxs)))]
           })]
       [_ (inverse'' t x f)]})))

(define $inverse'
  (lambda [$t $x $f]
    (to-math-expr <Apply inverse (map from-math-expr {t x f})>)))
