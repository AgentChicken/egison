;;;;;
;;;;;
;;;;; Mathematics Expressions
;;;;;
;;;;;

(define $math-expr
  (matcher
    {[,$val []
      {[$tgt (if (eq? val tgt)
               {[]}
               {})]}]
     [$ [math-expr']
      {[<Div $p1 $p2> {<Div p1 p2>}]
       [<Plus $ts> {<Plus ts>}]
       [<Term $n $xs> {<Term n xs>}]
       [<Symbol $v $js> {<Symbol v js>}]
       [<Apply $f $args> {<Apply f args>}]
       [$tgt {(from-math-expr tgt)}]}]
     }))

(define $math-expr'
  (matcher
    {[<div $ $> [math-expr math-expr]
      {[<Div $p1 $p2> {[(to-math-expr' p1) (to-math-expr' p2)]}]
       [_ {}]}]
     [<plus $> [(multiset math-expr)]
      {[<Div <Plus $ts> <Plus {<Term 1 {}> @{}}>> {(map to-math-expr' ts)}]
       [_ {}]}]
     [<poly $> [term-exprs]
      {[<Div <Plus $ts> <Plus {<Term 1 {}> @{}}>> {(map to-math-expr' ts)}]
       [_ {}]}]
     [<term $ $> [integer (assoc-multiset math-expr)]
      {[<Div <Plus {<Term $n $xs> @{}}> <Plus {<Term 1 {}> @{}}>> {[n (map 2#[(to-math-expr' %1) %2] xs)]}]
       [_ {}]}]
     [<symbol $> [string]
      {[<Div <Plus {<Term 1 {[<Symbol $v {}> 1] @{}}> @{}}> <Plus {<Term 1 {}> @{}}>> {v}]
       [_ {}]}]
     [<symbol $ $> [string (list something)]
      {[<Div <Plus {<Term 1 {[<Symbol $v $js> 1] @{}}> @{}}> <Plus {<Term 1 {}> @{}}>> {[v js]}]
       [_ {}]}]
     [<apply $ $> [eq (list math-expr)]
      {[<Div <Plus {<Term 1 {[<Apply $v $mexprs> 1] @{}}> @{}}>
             <Plus {<Term 1 {}> @{}}>> 
        {[v (map to-math-expr' mexprs)]}]
       [_ {}]}]
     [$ [something]
      {[$tgt {(to-math-expr' tgt)}]}]
     }))

(define $poly-expr math-expr)
(define $term-expr math-expr)
(define $symbol-expr math-expr)

(define $term-exprs
  (matcher
    {[<nil> []
      {[{} {[]}]
       [_ {}]}]
     [<cons $ $> [math-expr term-exprs]
      {[$tgt (match-all tgt (multiset math-expr)
               [<cons $t $ts> [t (sum' ts)]])]}]
     [$ [something]
      {[$tgt {tgt}]}]
     }))

(define $symbol?
  (lambda [$mexpr]
    (match mexpr math-expr
      {[<symbol _> #t]
       [_ #f]})))

(define $symbol-name
  (lambda [$mexpr]
    (match mexpr math-expr
      {[<symbol $name _> name]
       [_ undefined]})))

(define $symbol-indices
  (lambda [$mexpr]
    (match mexpr math-expr
      {[<symbol _ $js> js]
       [_ undefined]})))

(define $apply?
  (lambda [$mexpr]
    (match mexpr math-expr
      {[<apply _ _> #t]
       [_ #f]})))

(define $simple-term? 1#(or (symbol? %1) (apply? %1)))

(define $term?
  (lambda [$mexpr]
    (match mexpr math-expr
      {[<term _ _> #t]
       [,0 #t]
       [_ #f]})))

(define $polynomial?
  (lambda [$mexpr]
    (match mexpr math-expr
      {[<plus _> #t]
       [,0 #t]
       [_ #f]})))

(define $from-polynomial
  (lambda [$mexpr]
    (match mexpr math-expr
      {[<plus $ts>
        ts]})))

(define $monomial?
  (lambda [$mexpr]
    (match mexpr math-expr
      {[<div <plus <cons <term _ _> <nil>>>
             <plus <cons <term _ _> <nil>>>>
        #t]
       [,0 #t]
       [_ #f]})))

(define $from-monomial
  (lambda [$mexpr]
    (match mexpr math-expr
      {[<div <plus <cons <term $a $xs> <nil>>>
             <plus <cons <term $b $ys> <nil>>>>
        [(/ a b)
         (/ (foldl *' 1 (map 2#(**' %1 %2) xs))
            (foldl *' 1 (map 2#(**' %1 %2) ys)))]]})))

;;
;; Map
;;
(define $map-polys
  (lambda [$fn $mexpr]
    (match mexpr math-expr
      {[<div $p1 $p2>
        (/' (fn p1) (fn p2))]})))

(define $map-terms
  (lambda [$fn $mexpr]
    (match mexpr math-expr
      {[<div <plus $ts1> <plus $ts2>>
        (/' (foldl +' 0 (map fn ts1))
            (foldl +' 0 (map fn ts2)))]})))

(define $map-symbols
  (lambda [$fn $mexpr]
    (map-terms (lambda [$term]
                 (match term term-expr
                   {[<term $a $xs>
                     (*' a (foldl *' 1 (map 2#(match %1 symbol-expr
                                                {[<symbol _> (**' (fn %1) %2)]
                                                 [<apply $g $args>
                                                  (** (fn (capply g (map (map-symbols fn $) args)))
                                                      %2)
                                                  ]})
                                            xs)))]}))
               mexpr)))

(define $contain-symbol?
  (lambda [$x $mexpr]
    (any id (match mexpr math-expr
              {[<div <plus $ts1> <plus $ts2>>
                (map (lambda [$term]
                       (match term term-expr
                         {[<term _ $xs>
                           (any id (map 2#(match %1 symbol-expr
                                            {[,x #t]
                                             [<apply _ $args> (any id (map (contain-symbol? x $) args))]
                                             [_ #f]})
                                        xs))]}))
                     {@ts1 @ts2})]}))))

;;;
;;; Substitute
;;;
(define $substitute
  (lambda [$ls $mexpr]
    (if (tensor? mexpr)
      (tensor-map (substitute ls $) mexpr)
      (match ls (list [symbol-expr math-expr])
        {[<nil> mexpr]
         [<cons [$x $a] $rs>
          (substitute rs (substitute' x a mexpr))]}))))

(define $substitute'
  (lambda [$x $a $mexpr]
    (map-symbols (rewrite-symbol x a $) mexpr)))

(define $rewrite-symbol 
  (lambda [$x $a $sexpr]
    (match sexpr symbol-expr
      {[,x a]
       [_ sexpr]})))

;;;
;;; Coefficient
;;;
(define $coefficients
  (lambda [$x $f]
    (let {[$m (capply max {0 @(match-all f math-expr
                                [<div <plus <cons <term $a <ncons $k ,x $ts>> _>> _> k])})]}
      (map (coefficient x $ f) (between 0 m)))))

(define $coefficient
  (lambda [$x $m $f]
    (if (eq? m 0)
      (/ (sum (match-all f math-expr
                [<div <plus <cons <term $a (& !<cons ,x _> $ts)> _>> _>
                 (foldl *' a (map 2#(**' %1 %2) ts))]))
         (denominator f))
      (coefficient' x m f))))

(define $coefficient'
  (lambda [$x $m $f]
    (/ (sum (match-all f math-expr
              [<div <plus <cons <term $a <ncons $k ,x $ts>> _>> _>
               (if (eq? m k)
                 (foldl *' a (map 2#(**' %1 %2) ts))
                 0)]))
       (denominator f))))
