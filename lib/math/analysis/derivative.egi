;;;;;
;;;;;
;;;;; Differentiation
;;;;;
;;;;;

(define $∂/∂
  (lambda [$f $x]
    (match f math-expr
      {; symbol
       [,x 1]
       [<symbol _ _> 0]
       ; function application
       [<apply (& ?scalar? $g) (& $args <join $hs <cons ,x _>>)>
        (capply '(add-subscript g (+ (length hs) 1)) args)]
       [<apply (& ?scalar? $g) $args>
        (sum (map (lambda [$t] (* (∂/∂ (capply g args) t) (∂/∂ t x)))
                  args))]
       [<apply _ _> (d/d f x)]
       ; term (constant)
       [,0 0]
       [<term _ <nil>> 0]
       ; term (multiplication)
       [<term ,1 <ncons $n $fx <nil>>> (* n (** fx (- n 1)) (∂/∂ fx x))]
       [<mult $a <ncons $n $fx $r>>
        (+ (* a (∂/∂ (**' fx n) x) r)
           (* a (**' fx n) (∂/∂ r x)))]
       ; polynomial
       [<poly $ts> (sum (map (∂/∂ $ x) ts))]
       ; quotient
       [<div $p1 $p2>
        (let {[$p1' (∂/∂ p1 x)]
              [$p2' (∂/∂ p2 x)]}
          (/ (- (* p1' p2) (* p2' p1)) (** p2 2)))]
       })))

(define $d/d
  (lambda [$f $x]
    (match f math-expr
      {; function application
       [(,exp $g) (* (exp g) (∂/∂ g x))]
       [(,** $g $h) (* f (∂/∂ (* (log g) h) x))]
       [(,log $g) (* (/ 1 g) (∂/∂ g x))]
       [(,cos $g) (* (* -1 (sin g)) (∂/∂ g x))]
       [(,sin $g) (* (cos g) (∂/∂ g x))]
       [(,sqrt $g) (* (/ 1 (* 2 (sqrt g))) (∂/∂ g x))]
       [_ (∂/∂ f x)]
       })))

(define $pd/pd ∂/∂)

(define $∇ ∂/∂)
(define $nabla ∇)

(define $grad ∇)
(define $div (compose ∇ (trace $)))

(define $taylor-expansion
  (lambda [%f %xs %as]
    (with-symbols {h}
      (let {[$hs (generate-tensor 1#h_%1 (tensor-size xs))]}
        (map2 *
              (map 1#(/ 1 (fact %1)) nats0)
              (map (compose (V.substitute xs as $)
                            (V.substitute hs (with-symbols {i} (- xs_i as_i)) $))
                   (iterate (compose 1#(∇ %1 xs) 1#(V.* hs %1)) f)))))))

(define $maclaurin-expansion
  (lambda [$f $xs]
    (multivariate-taylor-expansion f xs (tensor-map 1#0 xs))))
